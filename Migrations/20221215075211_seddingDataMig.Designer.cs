// <auto-generated />
using System;
using Coach.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Coach.Migrations
{
    [DbContext(typeof(CoachContext))]
    [Migration("20221215075211_seddingDataMig")]
    partial class seddingDataMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Coach.Models.Adz", b =>
                {
                    b.Property<int>("AdzId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AdzIsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("AdzOrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("AdzPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int");

                    b.HasKey("AdzId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("Adzs");
                });

            modelBuilder.Entity("Coach.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("BannerIsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("BannerOrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("BannerPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int");

                    b.HasKey("BannerId");

                    b.ToTable("Banners");
                });

            modelBuilder.Entity("Coach.Models.Camp", b =>
                {
                    b.Property<int>("CampId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampPlanId")
                        .HasColumnType("int");

                    b.Property<int>("CampTargetId")
                        .HasColumnType("int");

                    b.Property<string>("CampTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CampTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("JoinEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("JoinStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlanEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlanStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("SubPrice")
                        .HasColumnType("float");

                    b.Property<string>("TrackID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ispaid")
                        .HasColumnType("bit");

                    b.Property<string>("payment_type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampId");

                    b.HasIndex("CampPlanId");

                    b.HasIndex("CampTargetId");

                    b.HasIndex("CampTypeId");

                    b.HasIndex("CountryId");

                    b.ToTable("Camps");
                });

            modelBuilder.Entity("Coach.Models.CampImage", b =>
                {
                    b.Property<int>("CampImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CampId")
                        .HasColumnType("int");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CampImageId");

                    b.HasIndex("CampId");

                    b.ToTable("CampImages");
                });

            modelBuilder.Entity("Coach.Models.CampPlan", b =>
                {
                    b.Property<int>("CampPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DurationInMonth")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PlanTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("CampPlanId");

                    b.HasIndex("CountryId");

                    b.ToTable("CampPlans");
                });

            modelBuilder.Entity("Coach.Models.CampTarget", b =>
                {
                    b.Property<int>("CampTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CampTargetTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampTargetTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CampTargetId");

                    b.ToTable("CampTargets");
                });

            modelBuilder.Entity("Coach.Models.CampType", b =>
                {
                    b.Property<int>("CampTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CampTypeTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CampTypeTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CampTypeId");

                    b.ToTable("CampTypes");
                });

            modelBuilder.Entity("Coach.Models.Configuration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Instgram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatsApp")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ConfigurationId");

                    b.ToTable("Configurations");

                    b.HasData(
                        new
                        {
                            ConfigurationId = 1,
                            Facebook = "https://www.facebook.com/",
                            Instgram = "https://www.insgram.com/",
                            LinkedIn = "https://www.linkedin.com/",
                            Twitter = "https://www.twitter.com/",
                            WhatsApp = "+965241"
                        });
                });

            modelBuilder.Entity("Coach.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Msg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Coach.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("CountryIsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("CountryOrderIndex")
                        .HasColumnType("int");

                    b.Property<string>("CountryPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Coach.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("CourseDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourseTargetId")
                        .HasColumnType("int");

                    b.Property<string>("CourseTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("CourseTargetId");

                    b.HasIndex("TrainerId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Coach.Models.CourseImage", b =>
                {
                    b.Property<int>("CourseImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseImageId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseImages");
                });

            modelBuilder.Entity("Coach.Models.CourseTarget", b =>
                {
                    b.Property<int>("CourseTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseTargetTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseTargetTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CourseTargetId");

                    b.ToTable("CourseTargets");
                });

            modelBuilder.Entity("Coach.Models.EntityType", b =>
                {
                    b.Property<int>("EntityTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EntityTypeTlar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EntityTypeTlen")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityTypeId");

                    b.ToTable("EntityTypes");

                    b.HasData(
                        new
                        {
                            EntityTypeId = 1,
                            EntityTypeTlar = "Trainer",
                            EntityTypeTlen = "Trainer"
                        },
                        new
                        {
                            EntityTypeId = 2,
                            EntityTypeTlar = "Camp",
                            EntityTypeTlen = "Camp"
                        },
                        new
                        {
                            EntityTypeId = 3,
                            EntityTypeTlar = "Tournment",
                            EntityTypeTlen = "Tournment"
                        },
                        new
                        {
                            EntityTypeId = 4,
                            EntityTypeTlar = "Course",
                            EntityTypeTlen = "Course"
                        },
                        new
                        {
                            EntityTypeId = 5,
                            EntityTypeTlar = "URL",
                            EntityTypeTlen = "URL"
                        });
                });

            modelBuilder.Entity("Coach.Models.FAQ", b =>
                {
                    b.Property<int>("FAQId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AnswerEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionAr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionEn")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FAQId");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("Coach.Models.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Coach.Models.Newsletter", b =>
                {
                    b.Property<int>("NewsletterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NewsletterId");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("Coach.Models.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Coach.Models.PageContent", b =>
                {
                    b.Property<int>("PageContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitleAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTitleEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PageContentId");

                    b.ToTable("PageContents");

                    b.HasData(
                        new
                        {
                            PageContentId = 1,
                            ContentAr = "من نحن",
                            ContentEn = "About Page",
                            PageTitleAr = "من نحن",
                            PageTitleEn = "About"
                        },
                        new
                        {
                            PageContentId = 2,
                            ContentAr = "الشروط والاحكام",
                            ContentEn = "Condition and Terms Page",
                            PageTitleAr = "الشروط والاحكام",
                            PageTitleEn = "Condition and Terms"
                        },
                        new
                        {
                            PageContentId = 3,
                            ContentAr = "سياسة الخصوصية",
                            ContentEn = "Privacy Policy Page",
                            PageTitleAr = "سياسة الخصوصية",
                            PageTitleEn = "Privacy Policy"
                        });
                });

            modelBuilder.Entity("Coach.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PaymentMethodTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentMethodTlar")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodId");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            PaymentMethodId = 1,
                            PaymentMethodTlEn = "CASH",
                            PaymentMethodTlar = "CASH"
                        },
                        new
                        {
                            PaymentMethodId = 2,
                            PaymentMethodTlEn = "KNET",
                            PaymentMethodTlar = "KNET"
                        });
                });

            modelBuilder.Entity("Coach.Models.PublicDevice", b =>
                {
                    b.Property<int>("PublicDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAndroiodDevice")
                        .HasColumnType("bit");

                    b.HasKey("PublicDeviceId");

                    b.HasIndex("CountryId");

                    b.ToTable("PublicDevices");
                });

            modelBuilder.Entity("Coach.Models.PublicNotification", b =>
                {
                    b.Property<int>("PublicNotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<int?>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublicNotificationId");

                    b.HasIndex("CountryId");

                    b.HasIndex("EntityTypeId");

                    b.ToTable("PublicNotifications");
                });

            modelBuilder.Entity("Coach.Models.PublicNotificationDevice", b =>
                {
                    b.Property<int>("PublicNotificationDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int?>("PublicDeviceId")
                        .HasColumnType("int");

                    b.Property<int>("PublicNotificationId")
                        .HasColumnType("int");

                    b.HasKey("PublicNotificationDeviceId");

                    b.HasIndex("PublicDeviceId");

                    b.HasIndex("PublicNotificationId");

                    b.ToTable("PublicNotificationDevices");
                });

            modelBuilder.Entity("Coach.Models.Section", b =>
                {
                    b.Property<int>("SectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SectionOrderIndex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SectionTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SectionId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("Coach.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SubDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ispaid")
                        .HasColumnType("bit");

                    b.Property<string>("payment_type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubscriptionId");

                    b.HasIndex("EntityTypeId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("Coach.Models.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlanEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PlanStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SubEndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("SubPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("SubStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentDescAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TournamentDescEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentPlanId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentTargetId")
                        .HasColumnType("int");

                    b.Property<string>("TournamentTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TournamentTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TrackID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TranID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ispaid")
                        .HasColumnType("bit");

                    b.Property<string>("payment_type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentId");

                    b.HasIndex("CountryId");

                    b.HasIndex("TournamentPlanId");

                    b.HasIndex("TournamentTargetId");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("Coach.Models.TournamentImage", b =>
                {
                    b.Property<int>("TournamentImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("TournamentImageId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentImages");
                });

            modelBuilder.Entity("Coach.Models.TournamentPlan", b =>
                {
                    b.Property<int>("TournamentPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DurationInMonth")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PlanTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("TournamentPlanId");

                    b.HasIndex("CountryId");

                    b.ToTable("TournamentPlans");
                });

            modelBuilder.Entity("Coach.Models.TournamentTarget", b =>
                {
                    b.Property<int>("TournamentTargetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TournamentTargetTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TournamentTargetTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentTargetId");

                    b.ToTable("TournamentTargets");
                });

            modelBuilder.Entity("Coach.Models.TournamentType", b =>
                {
                    b.Property<int>("TournamentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("TournamentTypeTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TournamentTypeTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentTypeId");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("Coach.Models.Trainer", b =>
                {
                    b.Property<int>("TrainerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("DescriptionAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullNameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SectionId")
                        .HasColumnType("int");

                    b.Property<string>("Tele")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainerId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("SectionId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("Coach.Models.TrainerDevice", b =>
                {
                    b.Property<int>("TrainerDeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAndroiodDevice")
                        .HasColumnType("bit");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("TrainerDeviceId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerDevices");
                });

            modelBuilder.Entity("Coach.Models.TrainerImage", b =>
                {
                    b.Property<int>("TrainerImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Pic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.HasKey("TrainerImageId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerImages");
                });

            modelBuilder.Entity("Coach.Models.TrainerPlan", b =>
                {
                    b.Property<int>("TrainerPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("DurationInMonth")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PlanTlAr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlanTlEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("TrainerPlanId");

                    b.HasIndex("CountryId");

                    b.ToTable("TrainerPlans");
                });

            modelBuilder.Entity("Coach.Models.TrainerSubscription", b =>
                {
                    b.Property<int>("TrainerSubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Auth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PostDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Ref")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<int>("TrainerPlanId")
                        .HasColumnType("int");

                    b.Property<string>("TranID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ispaid")
                        .HasColumnType("bit");

                    b.Property<string>("payment_type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TrainerSubscriptionId");

                    b.HasIndex("TrainerId");

                    b.HasIndex("TrainerPlanId");

                    b.ToTable("TrainerSubscriptions");
                });

            modelBuilder.Entity("Coach.Models.Adz", b =>
                {
                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("Adzs")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.EntityType", "EntityType")
                        .WithMany("Adzs")
                        .HasForeignKey("EntityTypeId");

                    b.Navigation("Country");

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("Coach.Models.Camp", b =>
                {
                    b.HasOne("Coach.Models.CampPlan", "CampPlan")
                        .WithMany("Camps")
                        .HasForeignKey("CampPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.CampTarget", "CampTarget")
                        .WithMany("Camps")
                        .HasForeignKey("CampTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.CampType", "CampType")
                        .WithMany("Camps")
                        .HasForeignKey("CampTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("Camps")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CampPlan");

                    b.Navigation("CampTarget");

                    b.Navigation("CampType");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Coach.Models.CampImage", b =>
                {
                    b.HasOne("Coach.Models.Camp", "Camp")
                        .WithMany("CampImages")
                        .HasForeignKey("CampId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Camp");
                });

            modelBuilder.Entity("Coach.Models.CampPlan", b =>
                {
                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("CampPlans")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Coach.Models.Course", b =>
                {
                    b.HasOne("Coach.Models.CourseTarget", "CourseTarget")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.Trainer", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseTarget");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Coach.Models.CourseImage", b =>
                {
                    b.HasOne("Coach.Models.Course", "Course")
                        .WithMany("CourseImages")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Coach.Models.PublicDevice", b =>
                {
                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("PublicDevices")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Coach.Models.PublicNotification", b =>
                {
                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("PublicNotifications")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.EntityType", "EntityType")
                        .WithMany()
                        .HasForeignKey("EntityTypeId");

                    b.Navigation("Country");

                    b.Navigation("EntityType");
                });

            modelBuilder.Entity("Coach.Models.PublicNotificationDevice", b =>
                {
                    b.HasOne("Coach.Models.PublicDevice", "PublicDevice")
                        .WithMany("PublicNotificationDevice")
                        .HasForeignKey("PublicDeviceId");

                    b.HasOne("Coach.Models.PublicNotification", "PublicNotification")
                        .WithMany("PublicNotificationDevice")
                        .HasForeignKey("PublicNotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PublicDevice");

                    b.Navigation("PublicNotification");
                });

            modelBuilder.Entity("Coach.Models.Subscription", b =>
                {
                    b.HasOne("Coach.Models.EntityType", "EntityType")
                        .WithMany("Subscriptions")
                        .HasForeignKey("EntityTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.PaymentMethod", "PaymentMethod")
                        .WithMany("Subscriptions")
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("EntityType");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Coach.Models.Tournament", b =>
                {
                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("Tournaments")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.TournamentPlan", "TournamentPlan")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.TournamentTarget", "TournamentTarget")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.TournamentType", "TournamentType")
                        .WithMany("Tournaments")
                        .HasForeignKey("TournamentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("TournamentPlan");

                    b.Navigation("TournamentTarget");

                    b.Navigation("TournamentType");
                });

            modelBuilder.Entity("Coach.Models.TournamentImage", b =>
                {
                    b.HasOne("Coach.Models.Tournament", "Tournament")
                        .WithMany("TournamentImages")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Coach.Models.TournamentPlan", b =>
                {
                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("TournamentPlans")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Coach.Models.Trainer", b =>
                {
                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("Trainers")
                        .HasForeignKey("CountryId");

                    b.HasOne("Coach.Models.Gender", "Gender")
                        .WithMany("Trainers")
                        .HasForeignKey("GenderId");

                    b.HasOne("Coach.Models.Section", "Section")
                        .WithMany("Trainers")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Coach.Models.TrainerDevice", b =>
                {
                    b.HasOne("Coach.Models.Trainer", "Trainer")
                        .WithMany()
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Coach.Models.TrainerImage", b =>
                {
                    b.HasOne("Coach.Models.Trainer", "Trainer")
                        .WithMany("TrainerImages")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Coach.Models.TrainerPlan", b =>
                {
                    b.HasOne("Coach.Models.Country", "Country")
                        .WithMany("TrainerPlans")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Coach.Models.TrainerSubscription", b =>
                {
                    b.HasOne("Coach.Models.Trainer", "Trainer")
                        .WithMany("TrainerSubscriptions")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Coach.Models.TrainerPlan", "TrainerPlan")
                        .WithMany("TrainerSubscriptions")
                        .HasForeignKey("TrainerPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trainer");

                    b.Navigation("TrainerPlan");
                });

            modelBuilder.Entity("Coach.Models.Camp", b =>
                {
                    b.Navigation("CampImages");
                });

            modelBuilder.Entity("Coach.Models.CampPlan", b =>
                {
                    b.Navigation("Camps");
                });

            modelBuilder.Entity("Coach.Models.CampTarget", b =>
                {
                    b.Navigation("Camps");
                });

            modelBuilder.Entity("Coach.Models.CampType", b =>
                {
                    b.Navigation("Camps");
                });

            modelBuilder.Entity("Coach.Models.Country", b =>
                {
                    b.Navigation("Adzs");

                    b.Navigation("CampPlans");

                    b.Navigation("Camps");

                    b.Navigation("PublicDevices");

                    b.Navigation("PublicNotifications");

                    b.Navigation("TournamentPlans");

                    b.Navigation("Tournaments");

                    b.Navigation("TrainerPlans");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Coach.Models.Course", b =>
                {
                    b.Navigation("CourseImages");
                });

            modelBuilder.Entity("Coach.Models.CourseTarget", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Coach.Models.EntityType", b =>
                {
                    b.Navigation("Adzs");

                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Coach.Models.Gender", b =>
                {
                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Coach.Models.PaymentMethod", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Coach.Models.PublicDevice", b =>
                {
                    b.Navigation("PublicNotificationDevice");
                });

            modelBuilder.Entity("Coach.Models.PublicNotification", b =>
                {
                    b.Navigation("PublicNotificationDevice");
                });

            modelBuilder.Entity("Coach.Models.Section", b =>
                {
                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("Coach.Models.Tournament", b =>
                {
                    b.Navigation("TournamentImages");
                });

            modelBuilder.Entity("Coach.Models.TournamentPlan", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Coach.Models.TournamentTarget", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Coach.Models.TournamentType", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("Coach.Models.Trainer", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("TrainerImages");

                    b.Navigation("TrainerSubscriptions");
                });

            modelBuilder.Entity("Coach.Models.TrainerPlan", b =>
                {
                    b.Navigation("TrainerSubscriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
